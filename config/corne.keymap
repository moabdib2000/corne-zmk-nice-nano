/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        CAPA0 {
            // -----------------------------------------------------------------------------------------
            // | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RET  |
            //                    | GUI | LWR | GUI |   | SPAC | RSE  | ALT |

            bindings = <
          &kp TAB   &kp Q   &kp W             &kp E         &kp R      &kp T                       &kp Y            &kp U      &kp I    &kp O     &kp P      &kp BSPC
   &kp LEFT_SHIFT   &kp A   &kp S             &kp D         &kp F      &kp G                       &kp H            &kp J      &kp K    &kp L  &kp SEMI       &kp SQT
 &kp LEFT_CONTROL   &kp Z   &kp X             &kp C         &kp V      &kp B                       &kp N            &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp KP_ENTER
                                   &mt LEFT_ALT ESC  &kp LEFT_GUI  &kp SPACE          &lt 1 SINGLE_QUOTE  &lt 3 BACKSPACE  &lt 2 DEL
            >;
        };

        CAPA1 {
            // -----------------------------------------------------------------------------------------
            // | ESC  |     |  (  |  )  |  %  |  "  |   |  ,  |  7  |  8  |  9  |  /  | BKSP |
            // |      |     |  ;  |  :  |  &  |  '  |   |  .  |  4  |  5  |  6  |  *  |  =   |
            // | LCAPS|  <  |  >  |  _  |  $  |  @  |   |     |  1  |  2  |  3  |  -  |  +   |
            //                    | GUI |     |CTRL |   | ENT |  0   | ALT |

            bindings = <
 &kp RA(GRAVE)           &trans           &kp LS(N8)    &kp LS(N9)  &kp LS(N5)      &kp AT          &kp N7        &kp N8          &kp N9     &kp EQUAL  &kp KP_MULTIPLY  &kp BSPC
      &kp CLCK           &kp AT        &kp LS(COMMA)   &kp LS(DOT)  &kp LS(N6)   &kp MINUS          &kp N4        &kp N5          &kp N6   &kp KP_PLUS    &kp KP_DIVIDE  &kp RPAR
     &kp LSHFT  &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp LS(FSLH)    &kp DLLR  &kp RA(N2)          &kp N1        &kp N2          &kp N3  &kp KP_MINUS        &kp LA(E)  &kp RBKT
                                                            &trans      &trans      &trans          &trans  &kp NUMBER_0  &mt RALT COMMA
            >;
        };

        CAPA2 {
            // -----------------------------------------------------------------------------------------
            // | F1  | F2 |  F3 | F4  | F5  | F6  |     | [  |  ]  |  {  |  }  | PSCR| BKSP |
            // | F7  | F8 |  F9 | F10 | F11 | F12 |     | ¿  |  ?  |  #  |  &  | UP  |  ç   |
            // |BTCLR| BT1 | BT2| BT3 |BT4  | BT5 |     |  ¡ |  !  |  %  |  L  | DOWN|  R   |
            //             | bootloader |  _  | @   |     | ENT|     | ALT |
            //&kp PIPE=Ç    |    &kp TILDE ª  | &kp EQUAL=¡  |

            bindings = <
     &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp RA(LBKT)  &kp RA(RBKT)      &kp C_VOL_UP  &kp RA(BSLH)          &kp PSCRN  &kp C_MUTE
     &kp F7        &kp F8        &kp F9       &kp F10       &kp F11       &kp F12              &kp PLUS    &kp C_PREV      &kp C_VOL_DN    &kp C_NEXT       &kp C_VOL_UP    &kp BSLH
 &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4             &kp EQUAL      &kp EXCL  &kp C_PLAY_PAUSE        &trans  &kp C_VOLUME_DOWN  &kp C_NEXT
                                          &bootloader        &trans    &kp RA(N2)                &trans        &trans            &trans
            >;
        };

        CAPA3 {
            bindings = <
 &trans  &trans  &trans  &trans  &kp LS(N8)  &kp LS(N9)          &trans  &kp HOME  &kp UP_ARROW      &kp PG_UP  &trans  &trans
 &trans  &trans  &trans  &trans      &trans      &trans          &trans  &kp LEFT      &kp DOWN      &kp RIGHT  &trans  &trans
 &trans  &trans  &trans  &trans      &trans      &trans          &trans   &kp END        &trans  &kp PAGE_DOWN  &trans  &trans
                         &trans      &trans      &trans          &trans    &trans        &trans
            >;
        };
    };
};
